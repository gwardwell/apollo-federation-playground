# Opt in to Federation 2
extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: [
      "@key"
      "@inaccessible"
      "@external"
      "@tag"
      "@shareable"
      "@requires"
      "@provides"
    ]
  )

schema {
  query: Query
}

type Query {
  node(id: ID): Node
}

interface Node {
  id: ID!
}

# Since Author has a single-layer key (no nested keys)
# its id is federated on by this subgraph
type Author implements Node @key(fields: "authorId") {
  authorId: String!
  fullName: String! @external
  id: ID!
}

# Since Book has a complex key, its id is referenced externally and
# instead federated on by a secondary node relay service. Book is
# here solely to make it resolvable by the node query.
type Book implements Node
  @key(fields: "bookId author { fullName }", resolvable: false) {
  bookId: String!
  author: Author!
  id: ID! @external
}
